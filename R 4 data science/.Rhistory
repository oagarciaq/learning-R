geom_histogram(binwidth = 0.01)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 0.10)
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 1)
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot()
ggplot(penguins, aes(x = body_mass_g, color = species)) +
geom_density(linewidth = 0.75) # Modifica el ancho de la línea
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + # Relleno y linea basados en el mismo dato adaptando el mismo color
geom_density(alpha = 0.5) # Establesco la opacidad del color establecido. Toma valores entre 0 y 1
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar()
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill") # Grafica con respecto al 100% mas no con la cantidad
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = island))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island)
glimpse(mpg)
ggplot(
mpg,
aes(x = hwy, y = displ, color = cty)
) +
geom_point()
ggplot(
mpg,
aes(x = hwy, y = displ, size = cty)
) +
geom_point()
ggplot(
mpg,
aes(x = hwy, y = displ, size = cty, color = cty)
) +
geom_point()
ggplot(
mpg,
aes(x = hwy, y = displ, size = cty, color = cty, shape = drv)
) +
geom_point()
ggplot(
penguins,
aes(x = bill_depth_mm, y = bill_length_mm, color = species)
) +
geom_point()
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species
)
) +
geom_point() +
labs(color = "Species")
#>The code provided in the exercise yields two separate legends because the legend for color is renamed to "Species" but the legend for shape is not, and is named "species" by default instead. To fix it, we would need to explicitly rename the shape legend as well.
ggplot(
data = penguins,
mapping = aes(
x = bill_length_mm, y = bill_depth_mm,
color = species, shape = species
)
) +
geom_point() +
labs(
color = "Species",
shape = "Species"
)
#> Warning: Removed 2 rows containing missing values (`geom_point()`).
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
ggplot(penguins, aes(x = species, fill = island)) +
geom_bar(position = "fill")
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggsave(filename = "penguin-plot.png")
ggplot(mpg, aes(x = class)) +
geom_bar()
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point()
ggsave("mpg-plot.pdf")
1 / 200 * 30
#> [1] 0.15
(59 + 73 + 2) / 3
#> [1] 44.66667
sin(pi / 2)
#> [1] 1
x <- 3 * 4
primes <- c(2, 3, 5, 7, 11, 13)
primes * 2
#> [1]  4  6 10 14 22 26
primes - 1
#> [1]  1  2  4  6 10 12
# create vector of primes
primes <- c(2, 3, 5, 7, 11, 13)
# multiply primes by 2
primes * 2
#> [1]  4  6 10 14 22 26
# function_name(argument1 = value1, argument2 = value2, ...)
seq(from = 1, to = 10)
library(nycflights13)
flights
View(flights)
print(flights, width = Inf)
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
flights |>
filter(dep_delay > 120) # Muesra que filas tiene un retraso mayor a 120
flights |>
filter(month == 1 & day == 1) # Muestra los datos que sean del primero de enero
flights %>% # Es lo mismo que escribir |>
filter(month == 1 | month == 2)
flights |>
filter(month %in% c(1, 2)) # meses correspondientes a enero y febrero
jan1 <- flights |>
filter(month == 1 & day == 2)
flights |>
arrange(year, month, day, dep_time)
flights |>
arrange(desc(dep_delay))
flights |>
distinct()
flights |> # Find all unique origin and destination pairs
distinct(origin, dest)
flights |>
distinct(origin, dest, .keep_all = TRUE) # Traigo los valores únicos de origin, dest y mantengo las demás columnas
flights |>
count(origin, dest, sort = TRUE) # Cuenta el número de veces que sucede algo
flights |>
filter(arr_delay >= 120)
flights |>
filter(dest %in% c("IAH", "HOU"))
flights |>
filter(carrier %in% c("UA", "AA", "DL"))
flights |>
filter(month %in% c(6, 7, 8))
flights |>
filter(arr_delay >= 120 & dep_delay <= 0) |>
view()
flights |>
filter(dep_delay >= 60 & dep_delay - arr_delay > 30)
flights |>
arrange(desc(dep_delay)) |>
arrange(sched_dep_time) |>
relocate(dep_delay, sched_dep_time) # Cambia la posición de las columnas
flights |>
mutate(speed = distance / (air_time / 60)) |> # Crea nueva columas que en funcion de variables existentes. También puede modificar y eliminar columnas. En este caso crea la columna speed
arrange(desc(speed)) |>
relocate(speed)
flights |>
distinct(year, month, day) |>
nrow()
flights |>
arrange(desc(distance)) |>
relocate(distance)
flights |>
arrange(distance) |>
relocate(distance)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
.before = 1 # Nos permite agregar las columnas a la izquierda en lugar de la derecha
)
flights |>
mutate(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
.after = day
)
flights |>
mutate(
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours,
.keep = "used"
)
flights |>
select(year, month, day)
flights |>
select(year:day)
flights |>
select(!year:day) # En lugar de "!" también es usar ver códigos con "-"
flights |>
select(where(is.character))
flights |>
select(tail_num = tailnum) # Nombre nuevo = Nombre anterior
flights |>
rename(tail_num = tailnum)
# janitor::clean_names() #Limpia lso nombres de las columnas
flights |>
relocate(time_hour, air_time)
flights |>
relocate(year:dep_time, .after = time_hour)
flights |>
relocate(starts_with("arr"), .before = dep_time)
flights |>
relocate(dep_time, sched_dep_time, dep_delay)
flights |>
select(dep_time, dep_delay, arr_time)
flights |>
select(starts_with("dep"), starts_with("arr"))
flights |>
select(dep_time:arr_time, -contains("sched"))
flights |>
select(dep_time, dep_time, dep_time, dep_time)
flights |> select(contains("TIME")) # Contains ignora las mayúsculas
flights |>
select(contains("TIME", ignore.case = FALSE)) # Para que tenga en cuenta las mayúsculas
flights |>
rename(air_time_min = air_time) |>
relocate(air_time_min)
# flights |>
#  select(tailnum) |>
#  arrange(arr_delay) #El error se da porque primero selecciono solo va columna tailnum, por lo que ya no hay más columnas para tener de referencia para ordenar las filas
flights |>
filter(dest == "IAH") |>
mutate(speed = distance / air_time * 60) |>
select(year:day, dep_time, carrier, speed) |>
arrange(desc(speed))
arrange(
select(
mutate(
filter(
flights,
dest == "IAH"
),
speed = distance / air_time * 60
),
year:day, dep_time, carrier, flight, speed
),
desc(speed)
)
flights1 <- filter(flights, dest == "IAH")
flights2 <- mutate(flights1, speed = distance / air_time * 60)
flights3 <- select(flights2, year:day, dep_time, carrier, flight, speed)
arrange(flights3, desc(speed))
flights |>
group_by(month)
flights |>
group_by(month) |>
summarize(
avg_delay = mean(dep_delay)
)
flights |>
group_by(month) |>
summarize(
avg_delay = mean(dep_delay, na.rm = TRUE)
)
flights |>
group_by(month) |>
summarize(
avg_delay = mean(dep_delay, na.rm = TRUE),
n = n()
)
flights |>
group_by(dest) |>
slice_max(arr_delay, n = 1, with_ties = FALSE) |>
relocate(dest)
daily <- flights |>
group_by(year, month, day)
daily
# daily_flights <- daily |>
#  summarize(n=n(
#  ))
daily_flights <- daily |>
summarize(
n = n(),
.groups = "drop_last"
)
daily_flights
daily |>
ungroup()
daily |>
ungroup() |>
summarize(
avg_delay = mean(dep_delay, na.rm = TRUE),
flights = n()
)
flights |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n = n(), # Numero de datos
.by = month
)
flights |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n = n(),
.by = c(origin, dest)
)
flights |>
group_by(carrier) |>
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
arrange(desc(avg_dep_delay))
flights |>
group_by(dest) |>
arrange(dest, desc(dep_delay)) |>
slice_head(n = 5) |>
relocate(dest, dep_delay)
flights |>
group_by(hour) |>
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
ggplot(aes(x = hour, y = avg_dep_delay)) +
geom_smooth()
flights |>
slice_min(dep_delay, n = -5) |> # Un valor negativo no provoca ningún cambio
relocate(dep_delay)
flights |>
slice_min(dep_delay, n = 5) |>
relocate(dep_delay)
flights |>
slice_max(dep_delay, n = -5) |>
relocate(dep_delay)
flights |>
slice_max(dep_delay, n = 5) |>
relocate(dep_delay)
df <- tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
df |>
group_by(y)
df |>
arrange(y)
df |>
group_by(y) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
mutate(mean_x = mean(x))
batters <- Lahman::Batting |>
group_by(playerID) |>
summarize(
performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
n = sum(AB, na.rm = TRUE)
)
batters
batters |>
filter(n > 100) |>
ggplot(aes(x = n, y = performance)) +
geom_point(alpha = 1 / 10) +
geom_smooth(se = FALSE)
batters |>
arrange(desc(performance))
table1
table2
table3
# Compute rate per 10,000
table1 |>
mutate(rate = cases / population * 10000)
# Compute total cases per year
table1 |>
group_by(year) |>
summarize(total_cases = sum(cases))
# Visualize changes over time
ggplot(table1, aes(x = year, y = cases)) +
geom_line(aes(group = country), color = "grey50") +
geom_point(aes(color = country, shape = country)) +
scale_x_continuous(breaks = c(1999, 2000)) # x-axis breaks at 1999 and 2000
table2 |>
pivot_wider(
names_from = type,
values_from = count
) |>
mutate(rate = cases / population * 10000)
#> # A tibble: 6 × 5
#>   country      year  cases population  rate
#>   <chr>       <dbl>  <dbl>      <dbl> <dbl>
#> 1 Afghanistan  1999    745   19987071 0.373
#> 2 Afghanistan  2000   2666   20595360 1.29
#> 3 Brazil       1999  37737  172006362 2.19
#> 4 Brazil       2000  80488  174504898 4.61
#> 5 China        1999 212258 1272915272 1.67
#> 6 China        2000 213766 1280428583 1.67
table3 |>
separate_wider_delim(
cols = rate,
delim = "/",
names = c("cases", "population"),
) |>
mutate(
cases = as.numeric(cases),
population = as.numeric(population),
rate = cases / population * 10000
)
#> # A tibble: 6 × 5
#>   country      year  cases population  rate
#>   <chr>       <dbl>  <dbl>      <dbl> <dbl>
#> 1 Afghanistan  1999    745   19987071 0.373
#> 2 Afghanistan  2000   2666   20595360 1.29
#> 3 Brazil       1999  37737  172006362 2.19
#> 4 Brazil       2000  80488  174504898 4.61
#> 5 China        1999 212258 1272915272 1.67
#> 6 China        2000 213766 1280428583 1.67
billboard
billboard |>
pivot_longer(
cols = starts_with("wk"), # Selecciona las columnas
names_to = "week", # Nombre de la nueva columna
values_to = "rank", # envia los valores de las columnas a na nueva columna llamada rank
values_drop_na = TRUE # Suprimo los NA
)
billboard_longer <- billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) |>
mutate(
week = parse_number(week) # Extrae solo el número
)
billboard_longer
billboard_longer |>
ggplot(aes(x = week, y = rank, group = track)) +
geom_line(alpha = 0.25) +
scale_y_reverse()
df <- tribble(
~id, ~bp1, ~bp2,
"A", 100, 120,
"B", 140, 115,
"C", 120, 125
)
df |>
pivot_longer(
cols = bp1:bp2,
names_to = "measurement",
values_to = "value"
)
who2
who2 |>
pivot_longer(
cols = !(country:year),
names_to = c("diagnosis", "gender", "age"), # Nuevas columnas
names_sep = "_", # La división de las nuevas columnas
values_to = "count"
)
household # Contiene valores de variables y nombres de variables
household |>
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_drop_na = TRUE
)
cms_patient_experience
cms_patient_experience |>
distinct(measure_cd, measure_title)
cms_patient_experience |>
pivot_wider(
names_from = measure_cd,
values_from = prf_rate
)
cms_patient_experience |>
pivot_wider(
id_cols = starts_with("org"),
names_from = measure_cd,
values_from = prf_rate
)
df <- tribble(
~id, ~measurement, ~value,
"A",        "bp1",    100,
"B",        "bp1",    140,
"B",        "bp2",    115,
"A",        "bp2",    120,
"A",        "bp3",    105
)
df |>
pivot_wider(
names_from = measurement,
values_from = value
)
df |>
distinct(measurement) |>
pull()
df |>
select(-measurement, -value) |>
distinct()
df |>
select(-measurement, -value) |>
distinct() |>
mutate(x = NA, y = NA, z = NA)
usethis::use_blank_slate()
df |>
select(-measurement, -value) |>
distinct()
df |>
select(-measurement, -value) |>
distinct() |>
mutate(x = NA, y = NA, z = NA)
